// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: solowallet.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import {
  Bolt11,
  FindTxRequest,
  FmLightning,
  LnUrlWithdrawRequest,
  LnUrlWithdrawResponse,
  OfframpSwapTarget,
  OnrampSwapSource,
  PaginatedRequest,
  TransactionStatus,
  TransactionType,
} from './lib';

export interface DepositFundsRequest {
  userId: string;
  amountFiat: number;
  reference: string;
  onramp?: OnrampSwapSource | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface ContinueDepositFundsRequest {
  userId: string;
  txId: string;
  amountFiat: number;
  onramp?: OnrampSwapSource | undefined;
  reference?: string | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface WithdrawFundsRequest {
  userId: string;
  amountFiat?: number | undefined;
  reference: string;
  offramp?: OfframpSwapTarget | undefined;
  lightning?: Bolt11 | undefined;
  lnurlRequest?: boolean | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface ContinueWithdrawFundsRequest {
  userId: string;
  txId: string;
  amountFiat?: number | undefined;
  offramp?: OfframpSwapTarget | undefined;
  lightning?: Bolt11 | undefined;
  lnurlRequest?: boolean | undefined;
  reference: string;
  pagination?: PaginatedRequest | undefined;
}

export interface UserTxsRequest {
  userId: string;
  pagination?: PaginatedRequest | undefined;
}

export interface UserTxsResponse {
  txId?: string | undefined;
  ledger: PaginatedSolowalletTxsResponse | undefined;
  meta?: WalletMeta | undefined;
  userId: string;
}

export interface SolowalletTx {
  id: string;
  userId: string;
  status: TransactionStatus;
  amountMsats: number;
  amountFiat?: number | undefined;
  lightning: FmLightning | undefined;
  type: TransactionType;
  reference: string;
  createdAt: string;
  updatedAt?: string | undefined;
}

export interface PaginatedSolowalletTxsResponse {
  /** List of onramp swaps */
  transactions: SolowalletTx[];
  /** Current page offset */
  page: number;
  /** Number of items return per page */
  size: number;
  /** Number of pages given the current page size */
  pages: number;
}

export interface WalletMeta {
  totalDeposits: number;
  totalWithdrawals: number;
  currentBalance: number;
}

export interface UpdateTxRequest {
  txId: string;
  updates: SolowalletTxUpdates | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface SolowalletTxUpdates {
  status?: TransactionStatus | undefined;
  lightning?: Bolt11 | undefined;
  reference?: string | undefined;
}

export interface SolowalletServiceClient {
  depositFunds(request: DepositFundsRequest): Observable<UserTxsResponse>;

  continueDepositFunds(
    request: ContinueDepositFundsRequest,
  ): Observable<UserTxsResponse>;

  withdrawFunds(request: WithdrawFundsRequest): Observable<UserTxsResponse>;

  continueWithdrawFunds(
    request: ContinueWithdrawFundsRequest,
  ): Observable<UserTxsResponse>;

  userTransactions(request: UserTxsRequest): Observable<UserTxsResponse>;

  updateTransaction(request: UpdateTxRequest): Observable<UserTxsResponse>;

  findTransaction(request: FindTxRequest): Observable<SolowalletTx>;

  processLnUrlWithdraw(
    request: LnUrlWithdrawRequest,
  ): Observable<LnUrlWithdrawResponse>;
}

export interface SolowalletServiceController {
  depositFunds(
    request: DepositFundsRequest,
  ): Promise<UserTxsResponse> | Observable<UserTxsResponse> | UserTxsResponse;

  continueDepositFunds(
    request: ContinueDepositFundsRequest,
  ): Promise<UserTxsResponse> | Observable<UserTxsResponse> | UserTxsResponse;

  withdrawFunds(
    request: WithdrawFundsRequest,
  ): Promise<UserTxsResponse> | Observable<UserTxsResponse> | UserTxsResponse;

  continueWithdrawFunds(
    request: ContinueWithdrawFundsRequest,
  ): Promise<UserTxsResponse> | Observable<UserTxsResponse> | UserTxsResponse;

  userTransactions(
    request: UserTxsRequest,
  ): Promise<UserTxsResponse> | Observable<UserTxsResponse> | UserTxsResponse;

  updateTransaction(
    request: UpdateTxRequest,
  ): Promise<UserTxsResponse> | Observable<UserTxsResponse> | UserTxsResponse;

  findTransaction(
    request: FindTxRequest,
  ): Promise<SolowalletTx> | Observable<SolowalletTx> | SolowalletTx;

  processLnUrlWithdraw(
    request: LnUrlWithdrawRequest,
  ):
    | Promise<LnUrlWithdrawResponse>
    | Observable<LnUrlWithdrawResponse>
    | LnUrlWithdrawResponse;
}

export function SolowalletServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'depositFunds',
      'continueDepositFunds',
      'withdrawFunds',
      'continueWithdrawFunds',
      'userTransactions',
      'updateTransaction',
      'findTransaction',
      'processLnUrlWithdraw',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('SolowalletService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('SolowalletService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const SOLOWALLET_SERVICE_NAME = 'SolowalletService';
