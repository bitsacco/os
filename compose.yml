services:
  api:
    container_name: api
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
      target: development
    command: bun dev api
    restart: always
    depends_on:
      - mongodb
      - redis
    env_file:
      - ./apps/api/.dev.env
    ports:
      - '4000:4000'
    volumes:
      - .:/usr/src/app
  auth:
    container_name: auth
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
      target: development
    command: bun dev auth
    restart: always
    depends_on:
      - mongodb
      - sms
      - redis
    env_file:
      - ./apps/auth/.dev.env
    ports:
      - '4010:4010'
      - '4012:4012'
    volumes:
      - .:/usr/src/app
  swap:
    container_name: swap
    build:
      context: .
      dockerfile: ./apps/swap/Dockerfile
      target: development
    command: [
        "sh",
        "-c",
        "bun dev swap"
      ]
    restart: always
    depends_on:
      - clientd
      - mongodb
      - redis
    env_file:
      - ./apps/swap/.dev.env
    ports:
      - '4040:4040'
      - '4042:4042'
    volumes:
      - .:/usr/src/app

  nostr:
    container_name: nostr
    build:
      context: .
      dockerfile: ./apps/nostr/Dockerfile
      target: development
    command: [
        "sh",
        "-c",
        "bun dev nostr"
      ]
    restart: always
    depends_on:
      - mongodb
      - redis
    env_file:
      - ./apps/nostr/.dev.env
    ports:
      - '4050:4050'
      - '4052:4052'
    volumes:
      - .:/usr/src/app

  sms:
    container_name: sms
    build:
      context: .
      dockerfile: ./apps/sms/Dockerfile
      target: development
    command: [
        "sh",
        "-c",
        "bun dev sms"
      ]
    restart: always
    depends_on:
      - mongodb
      - redis
    env_file:
      - ./apps/sms/.dev.env
    ports:
      - '4060:4060'
      - '4062:4062'
    volumes:
      - .:/usr/src/app

  shares:
    container_name: shares
    build:
      context: .
      dockerfile: ./apps/shares/Dockerfile
      target: development
    command: [
        "sh",
        "-c",
        "bun dev shares"
      ]
    restart: always
    depends_on:
      - mongodb
      - redis
    env_file:
      - ./apps/shares/.dev.env
    ports:
      - '4070:4070'
      - '4072:4072'
    volumes:
      - .:/usr/src/app

  solowallet:
    container_name: solowallet
    build:
      context: .
      dockerfile: ./apps/solowallet/Dockerfile
      target: development
    command: [
        "sh",
        "-c",
        "bun dev solowallet"
      ]
    restart: always
    depends_on:
      - swap
      - mongodb
      - redis
    env_file:
      - ./apps/solowallet/.dev.env
    ports:
      - '4080:4080'
      - '4082:4082'
    volumes:
      - .:/usr/src/app

  chama:
    container_name: chama
    build:
      context: .
      dockerfile: ./apps/chama/Dockerfile
      target: development
    command: [
        "sh",
        "-c",
        "bun dev chama"
      ]
    restart: always
    depends_on:
      - swap
      - mongodb
      - redis
      - sms
    env_file:
      - ./apps/chama/.dev.env
    ports:
      - '4090:4090'
      - '4092:4092'
    volumes:
      - .:/usr/src/app
      
  notification:
    container_name: notification
    build:
      context: .
      dockerfile: ./apps/notification/Dockerfile
      target: development
    command: [
        "sh",
        "-c",
        "bun dev notification"
      ]
    restart: always
    depends_on:
      - mongodb
      - redis
      - sms
      - nostr
    env_file:
      - ./apps/notification/.dev.env
    ports:
      - '5000:5000'
      - '5002:5002'
    volumes:
      - .:/usr/src/app

  mongodb:
    image: mongo:7.0-jammy
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=bs
      - MONGO_INITDB_ROOT_PASSWORD=password
    ports:
      - '0.0.0.0:27017:27017'
    volumes:
      - mongodb_datadir:/data/db
    restart: always

  redis:
    image: redis:7-alpine
    container_name: redis
    command: [
      "sh", "-c", 
      "redis-server --requirepass ${REDIS_PASSWORD:-securepassword} --maxmemory 256mb --maxmemory-policy allkeys-lru --appendonly yes"
    ]
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-securepassword}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  clientd:
    image: okjodom/fedimint-clientd:v0.4.1
    container_name: clientd
    environment:
      - FEDIMINT_CLIENTD_DB_PATH=/var/lib/clientd
      - FEDIMINT_CLIENTD_PASSWORD=fmcdpass
      - FEDIMINT_CLIENTD_ADDR=clientd:7070
      - FEDIMINT_CLIENTD_MODE=rest
      # - FEDIMINT_CLIENTD_INVITE_CODE=fed11qgqrwdthwden5te0v9cxjttndakk2ttrdpjk2um994erx7rsx568vur9dy68z6pnvd6xg63hwsh8wmn90p6zuctswqhsqqfqt94ttf29vdm0jfw3gk3w7quvcknshxd705ksavc0ajj7sj0v6dgsxcydnc
      - FEDIMINT_CLIENTD_INVITE_CODE=fed11qgqrsdnhwden5te0dp6k6mtfdenj6mr0v3nk2tfk09jkkeekxechqmphdvm8wdttxauxvufwwahx27r59eshqup0waej7qqpyq8kqe90ktshlvw3f88ztywxz559ag0yjvljvvtd3kepx2sfg2qdjn7s5m0
    ports:
      - 7070:7070
    volumes:
      - clientd_datadir:/var/lib/clientd
    restart: always

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    restart: always
    depends_on:
      - shares
      - solowallet
      - chama
      - swap
      - api

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - '3010:3000'
    restart: always
    depends_on:
      - prometheus

volumes:
  mongodb_datadir:
  clientd_datadir:
  prometheus_data:
  grafana_data:
  redis_data:
