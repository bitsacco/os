syntax = "proto3";

import "lib.proto";

package swap;

// SwapService: Defines the main service for handling swap operations.
service SwapService {
  // GetQuote: Retrieves a quote for a currency swap.
  rpc GetQuote (QuoteRequest) returns (QuoteResponse) {}

  // CreateOnrampSwap: Initiates an onramp swap transaction.
  rpc CreateOnrampSwap (OnrampSwapRequest) returns (SwapResponse) {}

  // FindOnrampSwap: Finds and returns a single onramp swap.
  rpc FindOnrampSwap (FindSwapRequest) returns (SwapResponse) {}

  // ListOnrampSwaps: Lists all onramp swaps, with pagination.
  rpc ListOnrampSwaps (lib.PaginatedRequest) returns (PaginatedSwapResponse) {}

  // CreateOfframpSwap: Initiates an offramp swap transaction.
  rpc CreateOfframpSwap (OfframpSwapRequest) returns (SwapResponse) {}

  // FindOfframpSwap: Finds and returns a single offramp swap.
  rpc FindOfframpSwap (FindSwapRequest) returns (SwapResponse) {}

  // ListOfframpSwaps: Lists all offramp swaps, with pagination.
  rpc ListOfframpSwaps (lib.PaginatedRequest) returns (PaginatedSwapResponse) {}
}

// QuoteRequest: Represents a request for a currency swap quote.
message QuoteRequest {
  // Currency to swap from
  lib.Currency from = 1;
  // Currency to swap to
  lib.Currency to = 2;

  reserved 3, 4, 5, 6, 7, 8, 9;

  // Optional amount to quote for
  // If provided, the service will return a quote for the specified amount
  optional string amount = 10;
}

// QuoteResponse: Represents the response for a currency swap quote.
message QuoteResponse {
  // Unique identifier for the quote
  string id = 1;
  // Currency being swapped from
  lib.Currency from = 2;
  // Currency being swapped to
  lib.Currency to = 3;
  // Exchange rate for the swap
  string rate = 4;
  // Expiry time (UNIX) for the quote
  string expiry = 5;

  reserved 6, 7, 8, 9;

  // Optional amount to be paid in target currency
  // Only available if amount was specified
  optional string amount = 10;
  // Optional fee for the swap
  // Only available if amount was specified
  optional string fee = 11;
}

// Quote: Represents a currency swap quote.
message Quote {
  // Optional quote ID to reference a quote.
  // If not specified, the service will create a new quote for the swap
  string id = 1;

  // If the quote is expired, allow the service can refresh the quote
  // should it expire before swap
  bool refresh_if_expired = 2;
}

// OnrampSwapRequest: Represents a request to create an onramp swap.
message OnrampSwapRequest {
  // Optional reference to a quote.
  // If not specified, the service will create a new quote for the swap
  optional Quote quote = 1;

  // Swap initiator reference to the account this transaction is associated with.
  string reference = 2;

  // Amount to swap
  // Any transaction fees will be deducted from this amount
  string amount_fiat = 3;

  reserved 4, 5, 6, 7, 8, 9;

  // Source of the swap
  lib.OnrampSwapSource source = 10;

  // Target of the swap
  lib.OnrampSwapTarget target = 11;
}

message OfframpSwapRequest {
  // Optional reference to a quote.
  // If not specified, the service will create a new quote for the swap
  optional Quote quote = 1;

  // Swap initiator reference to the account this transaction is associated with.
  string reference = 2;

  // Amount to swap
  // Any transaction fees will be deducted from this amount
  string amount_fiat = 3;

  // Target of the swap
  lib.OfframpSwapTarget target = 4;
}


// FindSwapRequest: Represents a request to find a swap.
message FindSwapRequest {
  // Unique identifier for the swap
  string id = 1;
}

message PaginatedSwapResponse {
  // List of onramp swaps
  repeated SwapResponse swaps = 1;
  // Current page offset
  int32 page = 2;
  // Number of items return per page
  int32 size = 3;
  // Number of pages given the current page size
  int32 pages = 4;
}

message SwapResponse {
  // Unique identifier for the swap
  // You can use this to track the status on both sides of the swap
  string id = 1;

  // Exchange rate to be used for the swap
  string rate = 2;

  // lightning invoice to be paid for swap
  string lightning = 3;

  // Current status of the swap
  lib.TransactionStatus status = 4;

  // Optional reference to a user
  optional string userId = 5;

  int32 retryCount = 6;

  string createdAt = 7;

  optional string updatedAt = 8;
  
  // Optional human-readable message about the swap status
  optional string message = 9;
}
