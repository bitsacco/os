syntax = "proto3";

package lib;

message Empty {}

// TransactionStatus: Enum representing the possible statuses of a transaction.
enum TransactionStatus {
  PENDING = 0;
  PROCESSING = 1;
  FAILED = 2;
  COMPLETE = 3;
}

message PaginatedRequest {
  // Page offset to start from
  int32 page = 2;
  // Number of items to be return per page
  int32 size = 1;
}

message FindTxRequest {
  string tx_id = 1;
}

enum TransactionType {
  DEPOSIT = 0;
  WITHDRAW = 1;
}

message OnrampSwapSource {
  // Currency code for the target currency
  Currency currency = 1;

  // Target destination
  MobileMoney origin = 2;
}

message OnrampSwapTarget {
  // Lightning protocol payout
  Bolt11 payout = 2;
}


message OfframpSwapTarget {
  // Currency code for the target currency
  Currency currency = 1;

  // Mobile money payout destination
  MobileMoney payout = 2;
}

message MobileMoney {
  // Phone number for the mobile money offramp
  string phone = 1;
}

// Currency: Enum representing supported currencies.
enum Currency {
  BTC = 0;
  KES = 1;
}

message Bolt11 {
  // Bolt11 lightning invoice
  string invoice = 1;
}

message FmLightning {
  optional string invoice = 1;
  optional string operation_id = 2;
  optional LnUrlWithdrawPoint lnurl_withdraw_point= 3;
}

// Message returned as `FmLightning`
// when a user want's to withdraw from Bitsacco wallet via LNURL
//
// REF: https://github.com/lnurl/luds/blob/luds/03.md step 3
message LnUrlWithdrawPoint {
  // The LNURL bech32 encoded string to be encoded as QR code
  string lnurl = 1;

  // Key used for withdrawal (k1 parameter)
  string k1 = 2;

  // URL that will handle the withdrawal callback
  string callback = 3;

  // When the withdrawal request expires (Unix timestamp)
  optional int64 expires_at = 4;
}

// Message serializing request parameters from GET request
// to bitsacco LNURL service `callback`
//
// REF: https://github.com/lnurl/luds/blob/luds/03.md step 5
message LnUrlWithdrawPointCall {
  // Key used for withdrawal (k1 parameter)
  string k1 = 1;

  // This is a payment request (pr parameter) generated by user `LN WALLET`
  Bolt11 payout = 2;
}

// Request object for processing LNURL withdrawals
//
// REF: https://github.com/lnurl/luds/blob/luds/03.md
message LnUrlWithdrawRequest {
  // The k1 parameter used to identify the withdrawal request
  // Sent on first and second steps of handshake
  string k1 = 1;

  // The type of LNURL. Always = 'withdrawRequest'
  // Sent in first step of handshake
  optional string tag = 2;
  
  // The LNURL callback confirmation
  // Sent in first step of handshake
  optional string callback = 3;
  
  // The maximum withdrawable amount msats confirmation
  // Sent in first step of handshake
  optional string max_withdrawable = 4;
  
  // The minimum withdrawable amount msats confirmation
  // Sent in first step of handshake
  optional string min_withdrawable = 5;
  
  // The default description confirmation
  // Sent in first step of handshake
  optional string default_description = 6;

  // The bolt11 invoice from the receiving wallet (the "pr" parameter).
  // Sent on second step of handshake
  optional string pr = 7;
}

// Message returned from  `LnUrlWithdrawPoint.callback`
// when a user's `LN WALLET` makes a GET request with invoice and params
// REF: https://github.com/lnurl/luds/blob/luds/03.md step 3 and step 6
message LnUrlWithdrawResponse {
  // The type of LNURL. Always = 'withdrawRequest'
  // Sent in RESPONSE to first step of handshake
  optional string tag = 1;
  
  // The LNURL callback confirmation
  // Sent in RESPONSE to first step of handshake
  optional string callback = 2;

  // The k1 parameter used to identify the withdrawal request
  // Sent in RESPONSE to first step of handshake
  optional string k1 = 3;
  
  // The maximum withdrawable amount msats confirmation
  // Sent in RESPONSE to first step of handshake
  optional string max_withdrawable = 4;
  
  // The minimum withdrawable amount msats confirmation
  // Sent in RESPONSE to first step of handshake
  optional string min_withdrawable = 5;
  
  // The default description confirmation
  // Sent in RESPONSE to first step of handshake
  optional string default_description = 6;

  // "OK" or "ERROR"
  // Sent in RESPONSE to second step of handshake
  optional string status = 7;

  // error reason if `status` = "ERROR"
  // Sent in RESPONSE to second step of handshake
  optional string reason = 8;
}
