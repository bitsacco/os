syntax = "proto3";

import "lib.proto";

package chamawallet;


service ChamaWalletService {
  rpc Deposit(ChamaDepositRequest) returns (ChamaTxsResponse){}

  rpc ContinueDeposit(ChamaContinueDepositRequest) returns (ChamaTxsResponse) {}

  rpc RequestWithdraw(ChamaWithdrawRequest) returns (ChamaTxsResponse){}

  rpc ContinueWithdraw(ChamaContinueWithdrawRequest) returns (ChamaTxsResponse) {}

  rpc UpdateTransaction(ChamaTxUpdateRequest) returns (ChamaTxsResponse) {}

  rpc FindTransaction(lib.FindTxRequest) returns (ChamaWalletTx) {}

  rpc FilterTransactions(ChamaTxsFilterRequest) returns (PaginatedChamaTxsResponse){}

  rpc AggregateWalletMeta(ChamaTxMetaRequest) returns (ChamaTxMetaResponse) {}

  rpc AggregateBulkWalletMeta(BulkChamaTxMetaRequest) returns (BulkChamaTxMetaResponse) {}

  rpc ProcessLnUrlWithdraw(lib.LnUrlWithdrawRequest) returns (lib.LnUrlWithdrawResponse) {}
}

message ChamaWalletTx {
  string id = 1;

  string member_id = 2;

  string chama_id = 3;

  ChamaTxStatus status = 4;

  int32 amount_msats = 5;

  optional int32 amount_fiat = 6;

  lib.FmLightning lightning = 7;

  lib.TransactionType type = 8;

  repeated ChamaTxReview reviews = 9;

  string reference = 10;

  string createdAt = 11;

  optional string updatedAt = 12;
  
  optional ChamaTxContext context = 13;
}

enum ChamaTxStatus {
  PENDING = 0;
  PROCESSING = 1;
  FAILED = 2;
  COMPLETE = 3;
  APPROVED = 4;
  REJECTED = 5;
}

message ChamaTxReview {
  string member_id = 1;
  Review review = 2;
}

enum Review {
  REJECT = 0;
  APPROVE = 1;
}

message ChamaTxContext {
  optional string shares_subscription_tracker = 2;
}

message ChamaDepositRequest {
  string member_id = 1;

  string chama_id = 2;

  int32 amount_fiat = 3;

  optional string reference = 4;

  optional lib.OnrampSwapSource onramp = 5;

  // Add more optional funding sources, like direct lightning deposit
  reserved 6,7,8,9;

  optional ChamaTxContext context = 10;

  optional lib.PaginatedRequest pagination = 11;
}

message ChamaContinueDepositRequest {
  string chama_id = 1;

  string tx_id = 2;

  int32 amount_fiat = 3;

  optional string reference = 4;

  optional lib.OnrampSwapSource onramp = 5;

  // Add more optional funding sources, like direct lightning deposit
  reserved 6,7,8,9,10;

  optional lib.PaginatedRequest pagination = 11;
}

message ChamaWithdrawRequest {
  string member_id = 1;

  string chama_id = 2;

  int32 amountFiat = 3;

  optional string reference = 4;

  reserved 5,6,7,8,9,10;

  optional lib.PaginatedRequest pagination = 11;
}

message ChamaContinueWithdrawRequest {
  string chama_id = 1;

  string member_id = 2;

  string tx_id = 3;

  optional string reference = 4;

  optional lib.OfframpSwapTarget offramp = 5;

  optional lib.Bolt11 lightning = 6;

  optional bool lnurl_request = 7;

  // Add more optional funding sources, like direct lightning deposit
  reserved 8,9,10;

  optional lib.PaginatedRequest pagination = 11;
}

message ChamaTxsFilterRequest {
  optional string member_id = 1;

  optional string chama_id = 2;

  reserved 3,4,5,6,7,8,9,10;

  optional lib.PaginatedRequest pagination = 11;
}

message ChamaTxsResponse {
  optional string tx_id = 1;

  PaginatedChamaTxsResponse ledger = 2;

  optional ChamaTxGroupMeta group_meta = 3;

  optional ChamaTxMemberMeta member_meta = 4;
}

message ChamaTxGroupMeta {
  int32 group_deposits = 1;

  float group_withdrawals = 2;

  int32 group_balance = 3;
}

message ChamaTxMemberMeta {
  int32 member_deposits = 1;

  float member_withdrawals = 2;

  int32 member_balance = 3;
}

message PaginatedChamaTxsResponse {
  repeated ChamaWalletTx transactions = 1;
  // Current page offset
  int32 page = 2;
  // Number of items return per page
  int32 size = 3;
  // Number of pages given the current page size
  int32 pages = 4;
}

message ChamaTxUpdateRequest {
  string chama_id = 1;

  string tx_id = 2;

  ChamaTxUpdates updates = 3;

  reserved 4,5,6,7,8,9,10;

  optional lib.PaginatedRequest pagination = 11;
}

message ChamaTxUpdates {
  optional ChamaTxStatus status = 1;

  optional int32 amount_msats = 2;

  repeated ChamaTxReview reviews = 3;

  optional string reference = 4;
}

message ChamaTxMetaRequest {
  // chama whose transaction meta is to be aggregated
  string chama_id = 1;

  // list one or more members whose transaction meta within chama specified will be aggregated
  // if empty, we aggregate meta for all members in the chama specified by `chama_id`
  repeated string select_member_ids = 2;

  // `true`, to skip aggregating member meta. overrides `select_member_ids` behavior
  optional bool skip_member_meta = 3;
}

message MemberMeta {
  // selected member id
  string member_id = 1;

  // transaction meta for the selected member
  ChamaTxMemberMeta member_meta = 2;
}

message ChamaMeta {
  // selected chama id
  string chama_id = 1;

  // transaction meta for the group
  ChamaTxGroupMeta group_meta = 2;

  // empty if `skip_memeber_meta` is `true`
  repeated MemberMeta member_meta = 3;
}

message ChamaTxMetaResponse {
  ChamaMeta meta = 1;
}

message BulkChamaTxMetaRequest {
  // list of chama IDs to aggregate wallet meta for
  repeated string chama_ids = 1;

  // Optional: specific member IDs to include for each chama
  // If empty, all members of each chama will be included
  repeated string select_member_ids = 2;

  // If true, skip member meta and only return group meta
  optional bool skip_member_meta = 3;
}

message BulkChamaTxMetaResponse {
  // List of meta data for each requested chama
  repeated ChamaMeta meta = 1;
}
