// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export enum Role {
  Member = 0,
  Admin = 1,
  SuperAdmin = 3,
  UNRECOGNIZED = -1,
}

export interface LoginUserRequest {
  pin: string;
  phone?: string | undefined;
  npub?: string | undefined;
}

export interface RegisterUserRequest {
  pin: string;
  phone?: string | undefined;
  npub?: string | undefined;
  roles: Role[];
}

export interface VerifyUserRequest {
  phone?: string | undefined;
  npub?: string | undefined;
  otp?: string | undefined;
}

export interface RecoverUserRequest {
  pin: string;
  phone?: string | undefined;
  npub?: string | undefined;
  otp?: string | undefined;
}

export interface AuthRequest {
  accessToken: string;
}

export interface AuthResponse {
  user: User | undefined;
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface TokensResponse {
  accessToken: string;
  refreshToken: string;
}

export interface RevokeTokenRequest {
  refreshToken: string;
}

export interface RevokeTokenResponse {
  success: boolean;
}

export interface User {
  id: string;
  phone?: Phone | undefined;
  nostr?: Nostr | undefined;
  profile?: Profile | undefined;
  roles: Role[];
}

export interface Phone {
  number: string;
  verified: boolean;
}

/** Users nostr identifier */
export interface Nostr {
  npub: string;
  verified: boolean;
}

export interface Profile {
  /** Users name or nym */
  name?: string | undefined;
  /** Users avatar url */
  avatarUrl?: string | undefined;
}

export interface UpdateUserRequest {
  userId: string;
  updates: UserUpdates | undefined;
}

export interface UserUpdates {
  phone?: Phone | undefined;
  nostr?: Nostr | undefined;
  profile?: Profile | undefined;
  roles: Role[];
}

export interface AuthServiceClient {
  loginUser(request: LoginUserRequest): Observable<AuthResponse>;

  registerUser(request: RegisterUserRequest): Observable<AuthResponse>;

  verifyUser(request: VerifyUserRequest): Observable<AuthResponse>;

  recoverUser(request: RecoverUserRequest): Observable<AuthResponse>;

  authenticate(request: AuthRequest): Observable<AuthResponse>;

  refreshToken(request: RefreshTokenRequest): Observable<TokensResponse>;

  revokeToken(request: RevokeTokenRequest): Observable<RevokeTokenResponse>;
}

export interface AuthServiceController {
  loginUser(
    request: LoginUserRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  registerUser(
    request: RegisterUserRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  verifyUser(
    request: VerifyUserRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  recoverUser(
    request: RecoverUserRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  authenticate(
    request: AuthRequest,
  ): Promise<AuthResponse> | Observable<AuthResponse> | AuthResponse;

  refreshToken(
    request: RefreshTokenRequest,
  ): Promise<TokensResponse> | Observable<TokensResponse> | TokensResponse;

  revokeToken(
    request: RevokeTokenRequest,
  ):
    | Promise<RevokeTokenResponse>
    | Observable<RevokeTokenResponse>
    | RevokeTokenResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'loginUser',
      'registerUser',
      'verifyUser',
      'recoverUser',
      'authenticate',
      'refreshToken',
      'revokeToken',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('AuthService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const AUTH_SERVICE_NAME = 'AuthService';
