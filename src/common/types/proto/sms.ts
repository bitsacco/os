// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: sms.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Empty } from './lib';

export interface SendSmsRequest {
  message: string;
  receiver: string;
}

export interface SendBulkSmsRequest {
  message: string;
  receivers: string[];
}

export interface SmsServiceClient {
  sendSms(request: SendSmsRequest): Observable<Empty>;

  sendBulkSms(request: SendBulkSmsRequest): Observable<Empty>;
}

export interface SmsServiceController {
  sendSms(request: SendSmsRequest): Promise<Empty> | Observable<Empty> | Empty;

  sendBulkSms(
    request: SendBulkSmsRequest,
  ): Promise<Empty> | Observable<Empty> | Empty;
}

export function SmsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['sendSms', 'sendBulkSms'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('SmsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('SmsService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const SMS_SERVICE_NAME = 'SmsService';
