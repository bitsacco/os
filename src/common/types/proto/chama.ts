// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: chama.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { PaginatedRequest } from './lib';

export enum ChamaMemberRole {
  Member = 0,
  Admin = 1,
  ExternalAdmin = 3,
  UNRECOGNIZED = -1,
}

export interface Chama {
  id: string;
  name: string;
  description?: string | undefined;
  members: ChamaMember[];
  /** User ID of member creating the chama */
  createdBy: string;
}

export interface ChamaMember {
  userId: string;
  roles: ChamaMemberRole[];
}

export interface ChamaInvite {
  phoneNumber?: string | undefined;
  nostrNpub?: string | undefined;
  roles: ChamaMemberRole[];
}

export interface CreateChamaRequest {
  name: string;
  description?: string | undefined;
  members: ChamaMember[];
  invites: ChamaInvite[];
  createdBy: string;
}

export interface UpdateChamaRequest {
  chamaId: string;
  updates: ChamaUpdates | undefined;
}

export interface ChamaUpdates {
  name?: string | undefined;
  description?: string | undefined;
  addMembers: ChamaMember[];
  updateMembers: ChamaMember[];
}

export interface FindChamaRequest {
  chamaId: string;
}

export interface FilterChamasRequest {
  createdBy?: string | undefined;
  memberId?: string | undefined;
  pagination?: PaginatedRequest | undefined;
}

export interface PaginatedFilterChamasResponse {
  chamas: Chama[];
  /** Current page offset */
  page: number;
  /** Number of items return per page */
  size: number;
  /** Number of pages given the current page size */
  pages: number;
  /** Total number of items across all pages */
  total: number;
}

export interface JoinChamaRequest {
  chamaId: string;
  memberInfo: ChamaMember | undefined;
}

export interface InviteMembersRequest {
  chamaId: string;
  invites: ChamaInvite[];
}

export interface GetMemberProfilesRequest {
  chamaId: string;
}

export interface MemberProfile {
  userId: string;
  roles: ChamaMemberRole[];
  name?: string | undefined;
  avatarUrl?: string | undefined;
  phoneNumber?: string | undefined;
  nostrNpub?: string | undefined;
}

export interface MemberProfilesResponse {
  members: MemberProfile[];
}

export interface ChamasServiceClient {
  createChama(request: CreateChamaRequest): Observable<Chama>;

  updateChama(request: UpdateChamaRequest): Observable<Chama>;

  joinChama(request: JoinChamaRequest): Observable<Chama>;

  inviteMembers(request: InviteMembersRequest): Observable<Chama>;

  findChama(request: FindChamaRequest): Observable<Chama>;

  filterChamas(
    request: FilterChamasRequest,
  ): Observable<PaginatedFilterChamasResponse>;

  getMemberProfiles(
    request: GetMemberProfilesRequest,
  ): Observable<MemberProfilesResponse>;
}

export interface ChamasServiceController {
  createChama(
    request: CreateChamaRequest,
  ): Promise<Chama> | Observable<Chama> | Chama;

  updateChama(
    request: UpdateChamaRequest,
  ): Promise<Chama> | Observable<Chama> | Chama;

  joinChama(
    request: JoinChamaRequest,
  ): Promise<Chama> | Observable<Chama> | Chama;

  inviteMembers(
    request: InviteMembersRequest,
  ): Promise<Chama> | Observable<Chama> | Chama;

  findChama(
    request: FindChamaRequest,
  ): Promise<Chama> | Observable<Chama> | Chama;

  filterChamas(
    request: FilterChamasRequest,
  ):
    | Promise<PaginatedFilterChamasResponse>
    | Observable<PaginatedFilterChamasResponse>
    | PaginatedFilterChamasResponse;

  getMemberProfiles(
    request: GetMemberProfilesRequest,
  ):
    | Promise<MemberProfilesResponse>
    | Observable<MemberProfilesResponse>
    | MemberProfilesResponse;
}

export function ChamasServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createChama',
      'updateChama',
      'joinChama',
      'inviteMembers',
      'findChama',
      'filterChamas',
      'getMemberProfiles',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('ChamasService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('ChamasService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const CHAMAS_SERVICE_NAME = 'ChamasService';
